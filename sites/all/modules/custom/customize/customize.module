<?php

// load blocks
module_load_include('inc', 'customize', 'customize.block');

/**
 * Implements hook_views_api().
 */
function customize_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'customize') . '/views',
  );
}

/**
 * Implementation of hook_init().
 */
function customize_init() {

    global $user, $theme_key;

    // resolves issue https://www.drupal.org/node/2156371
    if (strpos($theme_key, 'bootstrap') === FALSE) {
      include_once(drupal_get_path('theme', 'bootstrap') . '/includes/process.inc');
    }

   // Redirect user from overview page to edit page
   if(arg(0) == 'user' && is_numeric(arg(1)) && empty(arg(2))) {
     if (user_is_logged_in()) {
      drupal_goto('user/' . arg(1) . '/edit');
     }
   }

   $params = drupal_get_query_parameters();

   if(isset($params['desktop'])) {
     if($params['desktop'] == 1) {
       drupal_session_start();
       $_SESSION['autonaoperakdesktop'] = TRUE;
     }else{
       drupal_session_start();
       $_SESSION['autonaoperakdesktop'] = FALSE;
     }
   }

}

/**
 * Implements hook_theme().
 */
function customize_theme() {

  $module_path = drupal_get_path('module', 'customize');

  return array(
    'customize_hp_slider' => array(
      'template' => 'customize-hp-slider',
      'path' => $module_path . '/templates',
      'variables' => array('slides' => array(), 'data' => array()),
    ),
    'customize_hp_offer' => array(
      'template' => 'customize-hp-offer',
      'path' => $module_path . '/templates',
      'variables' => array('cars' => array(), 'data' => array()),
    ),
    'customize_hp_brand_car' => array(
      'template' => 'customize-hp-brand-car',
      'path' => $module_path . '/templates',
      'variables' => array('brand' => array(), 'data' => array()),
    ),
    'customize_category_list' => array(
      'template' => 'customize-category-list',
      'path' => $module_path . '/templates',
      'variables' => array('brand' => array(), 'data' => array()),
    ),
    'customize_highlight' => array(
      'template' => 'customize-highlight',
      'path' => $module_path . '/templates',
      'variables' => array('data' => array()),
    ),
    'customize_faq' => array(
      'template' => 'customize-faq',
      'path' => $module_path . '/templates',
      'variables' => array('question' => array(), 'data' => array()),
    ),
    'customize_car_pricelist' => array(
      'template' => 'customize-car-pricelist',
      'path' => $module_path . '/templates',
      'variables' => array('data' => array()),
    ),
    'customize_car_related' => array(
      'template' => 'customize-car-related',
      'path' => $module_path . '/templates',
      'variables' => array('cars' => array(), 'data' => array()),
    ),
    'customize_term_subcategory' => array(
      'template' => 'customize-term-subcategory',
      'path' => $module_path . '/templates',
      'variables' => array('items' => array(), 'data' => array()),
    ),
    'customize_product_list' => array(
      'template' => 'customize-product-list',
      'path' => $module_path . '/templates',
      'variables' => array('data' => array()),
    ),
  );
}

/**
 * Implementation of hook_menu_alter().
 */
function customize_menu_alter(&$items) {
  $items['node']['page callback'] = 'drupal_not_found';
  // modify link to remove replicate button from task menu
  if (module_exists('replicate_ui')) {
    $items['node/%node/replicate']['type'] = MENU_CALLBACK;
  }
}

/**
 * Make taxonomy/term/ID/edit vertical tabs
 */
function customize_form_taxonomy_form_term_alter(&$form, &$form_state, $form_id) {

  $form['additional_settings'] = array(
    '#type' => 'vertical_tabs',
    '#weight' => 99,
    '#attached' => array(
      'js' => array(drupal_get_path('module', 'node') . '/content_types.js'),
    ),
  );

  foreach ($form as $delta => $element) {
    if (is_array($element)) {
      if (!empty($element['#type'])) {
        if ($element['#type'] == 'fieldset') {
          $form[$delta]['#group'] = 'additional_settings';
          $form['additional_settings'][$delta] = $form[$delta];
          unset($form[$delta]);
        }
      }
    }
  }
}

/**
 * Added to modify weight of form_alter execution
 * http://drupal.stackexchange.com/questions/99980/how-do-i-set-locale-settings-fieldset-in-the-user-profile-form-to-uncollapsi
 */
function customize_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter') {
    $group = $implementations['customize'];
    unset($implementations['customize']);
    $implementations['customize'] = $group;
  }
}

/**
 * Implements hook_form_alter().
 * - hide locale user edit page settings
 */
function customize_form_alter(&$form, $form_state, $form_id) {

  if($form_id === 'user_login') {
    $form['wrapper'] = array(
      '#markup' => '<h2>' . t('Administration') . '</h2>',
      '#weight' => -10,
    );
    $form['name']['#attributes']['placeholder'] = t('E-mail');
    $form['name']['#attributes']['autocomplete'] = 'off';
    $form['name']['#description'] = '';
    $form['pass']['#attributes']['placeholder'] = t('Password');
    $form['name']['#attributes']['autocomplete'] = 'off';
    $form['pass']['#description'] = '';
    $form['actions']['submit']['#attributes']['class'][] = 'btn-primary';
    $form['actions']['submit']['#attributes']['class'][] = 'pull-left';
    $form['actions']['forgot'] = array(
      '#markup' => l(t('Forgot your password?'), 'user/password', array('attributes' => array('class' => array('forgot-password', 'pull-right'))))
    );
  }elseif($form_id === 'user_pass') {
    $form['wrapper'] = array(
      '#markup' => '<h2>' . t('Lost Password') . '</h2>',
      '#weight' => -10,
    );
    $form['name']['#attributes']['placeholder'] = t('E-mail');
    $form['name']['#attributes']['autocomplete'] = 'off';
    $form['actions']['submit']['#attributes']['class'][] = 'btn-primary';
    $form['actions']['submit']['#attributes']['class'][] = 'pull-left';
    $form['actions']['forgot'] = array(
      '#markup' => l(t('Login'), 'user', array('attributes' => array('class' => array('login', 'pull-right'))))
    );
  }

  // The language selector is only displayed if there is more than one language.
  if (drupal_multilingual()) {

    if ($form_id == 'user_register_form' || ($form_id == 'user_profile_form' && $form['#user_category'] == 'account')) {

      if (isset($form['locale'])) {
        $form['locale']['#access'] = FALSE;
      }
      if (isset($form['ckeditor'])) {
        $form['ckeditor']['#access'] = FALSE;
      }
      if (isset($form['redirect'])) {
        $form['redirect']['#access'] = FALSE;
      }
    }
  }
  // do ajax submit generic for all the webform those have no redirect option enabled
  if(isset($form['#node']) && isset($form['#node']->webform)) {
    if($form['#node']->webform['redirect_url'] == "<none>") {
      $matches = array();
      //check whether the form id have nid at the end like _nid
      preg_match('/[\d]+$/', $form_id, $matches);
      if(count($matches)) {
        $nid_match = $matches[0];
        if(strpos($form_id, 'webform_client_form_') == 0 && !empty($nid_match)) {
          if(isset($form['submitted']['phone'])) {
            $form['submitted']['phone']['#type'] = 'telfield';
          }
          $form['actions']['submit'] = array(
            '#type' => 'submit',
            '#ajax' => array(
              'callback' => 'customize_webform_form_ajax_callback',
              'wrapper' => str_replace('_','-',$form['#form_id']),
              'effect' => 'fade',
              ),
            '#value' => $form['#node']->webform['submit_text'],
            '#attributes' => array(
              'class' => array('btn-primary'),
              ),
          );
          $form['#attached']['js'] = array(
            drupal_get_path('module', 'customize') . '/js/webform.js',
          );
        }
      }
    }
  }

  if(strpos($form_id, 'webform_client_form') !== FALSE) {

    $form['checkbox_uoou'] = array(
      '#type' => 'checkbox',
      '#title' => 'Souhlasím se ' . l('zpracováním osobních údajů', 'node/16', array('attributes' => array('target'=>'_blank'))) . ' <span class="form-required" title="Toto pole je vyžadováno.">*</span>',
      '#weight' => 10,
      '#prefix' => '<div class="form-uoou">',
      '#suffix' => '</div>',
      '#element_validate' => array('customize_form_alter_uoou'),
    );
  }
}

/**
 * Validation callback.
 */
function customize_form_alter_uoou($element, &$form, &$form_state) {
  if ($element['#value'] == 0) {
      form_error($element, 'Před odesláním musíte souhlasit se zpracováním osobních údajů.');
    }
}

function customize_webform_form_ajax_callback($form, &$form_state) {
  if(form_get_errors()) {
    return $form;
  }else{
    return $form['#node']->webform['confirmation'];
  }
}

/**
 * Implements hook_ds_fields_info()
 */
function customize_ds_fields_info($entity_type) {

  $fields = array();
  $defaults = array(
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'file' => drupal_get_path('module', 'customize') . '/customize.ds.inc',
  );

  $fields['node']['customize_faq'] = array(
    'title' => t('Customize: FAQ'),
    'ui_limit' => array('*|*'),
    'function' => 'customize_faq_render',
  ) + $defaults;

  $fields['node']['customize_car_title'] = array(
    'title' => t('Customize: Title'),
    'ui_limit' => array('car|full'),
    'function' => 'customize_car_title_render',
  ) + $defaults;

  $fields['node']['customize_car_title_mobile'] = array(
    'title' => t('Customize: Title (mobile)'),
    'ui_limit' => array('car|full'),
    'function' => 'customize_car_title_render',
  ) + $defaults;

  $fields['node']['customize_car_sold'] = array(
    'title' => t('Customize: Sold (alert with link)'),
    'ui_limit' => array('car|full'),
    'function' => 'customize_car_sold_render',
  ) + $defaults;

  $fields['node']['customize_car_gallery'] = array(
    'title' => t('Customize: Car gallery'),
    'ui_limit' => array('car|full'),
    'function' => 'customize_car_gallery_render',
  ) + $defaults;

  $fields['node']['customize_car_description'] = array(
    'title' => t('Customize: Description'),
    'ui_limit' => array('car|full'),
    'function' => 'customize_car_description_render',
  ) + $defaults;

  $fields['node']['customize_car_contact'] = array(
    'title' => t('Customize: Contact'),
    'ui_limit' => array('car|full'),
    'function' => 'customize_car_contact_render',
  ) + $defaults;

  $fields['node']['customize_car_pricelist'] = array(
    'title' => t('Customize: Pricelist'),
    'ui_limit' => array('car|full'),
    'function' => 'customize_car_pricelist_render',
  ) + $defaults;

  $fields['node']['customize_car_related'] = array(
    'title' => t('Customize: Related cars'),
    'ui_limit' => array('car|full'),
    'function' => 'customize_car_related_render',
  ) + $defaults;

  $fields['node']['customize_car_form'] = array(
    'title' => t('Customize: Form'),
    'ui_limit' => array('car|full'),
    'function' => 'customize_car_form_render',
  ) + $defaults;

  $fields['node']['customize_car_teaser'] = array(
    'title' => t('Customize: Car teaser'),
    'ui_limit' => array('car|teaser'),
    'function' => 'customize_car_teaser_render',
  ) + $defaults;

  $fields['node']['customize_node_subcategory_car'] = array(
    'title' => t('Customize: Subcategory Cars'),
    'ui_limit' => array('*|*'),
    'function' => 'customize_node_subcategory_car_render',
  ) + $defaults;

  $fields['taxonomy_term']['customize_term_subcategory_car'] = array(
    'title' => t('Customize: Subcategory'),
    'ui_limit' => array('category_car|*'),
    'function' => 'customize_term_subcategory_car_render',
  ) + $defaults;

  $fields['taxonomy_term']['customize_term_subcategory_stock'] = array(
    'title' => t('Customize: Subcategory'),
    'ui_limit' => array('category_stock|*'),
    'function' => 'customize_term_subcategory_stock_render',
  ) + $defaults;
  $fields['paragraphs_item']['customize_paragraph_bullets'] = array(
    'title' => t('Customize: Bullets'),
    'ui_limit' => array('*|*'),
    'function' => 'customize_paragraph_bullets_render',
  ) + $defaults;

  if (isset($fields[$entity_type])) {
    return array($entity_type => $fields[$entity_type]);
  }
}

/**
 * Implements hook_admin_paths().
 *
 * Add IMCE to admin paths.
 */
function customize_admin_paths() {
  $paths = array(
    'imce' => TRUE,
  );
  return $paths;
}

/**
 * Get nested tree from taxonomy_tree function for sidebar menu.
 */
function customize_get_nested_tree($flatTree) {
  $tree = array();
  $last_term_stack = array();
  foreach ($flatTree as &$term) {
      while(count($last_term_stack) > 0){
          if(in_array(end($last_term_stack)->tid, $term->parents)) {
                  $lastTerm = end($last_term_stack);
                  $lastTerm->children[]=$term;
                  array_push($last_term_stack,$term);
                  break;
              } else {
                  array_pop($last_term_stack);
              }
      }
      if(empty($last_term_stack)){
          $tree[] =$term;
          array_push($last_term_stack, $term);
      }
  }
  return $tree;
}

/**
 * Used on osobni vozy, uzitkove vozy and terms category page.
 */
function _customize_subcategories($type, $vocabulary, $term = '') {
  $content = '';

  try {

    $subcategories = [];
    $children = [];
    $level = '';

    if($type == 'taxonomy_term') {
      // get parent to select all siblings
      $parents = taxonomy_get_parents($term->tid);
      if(count($parents)) {
        $level = 3;
        // eg. Fabia
        //$parent = key($parents);
        //$children = taxonomy_get_children($parent);
      }else{
        // eg. Škoda
        $children = taxonomy_get_tree($vocabulary, $term->tid, 1, TRUE);
        $level = 2;
      }
    }elseif($type == 'node') {
      // eg. Osobní vůz
      $children = taxonomy_get_tree($vocabulary, 0, 1, TRUE);
      $level = 1;
    }

    if(count($children)) {
      foreach ($children as $item) {
        $item_wrapper = entity_metadata_wrapper('taxonomy_term', $item);
        $image_themed = '';
        $image = $item_wrapper->field_term_image->value();
        if(!empty($image)) {
          $style_name = 'category-brand-list';
          if($level > 1) {
            $style_name = 'category-car-list';
          }
          $image_themed = theme('image_style', array('style_name' => $style_name, 'path' => $image['uri']));
        }
        $active = FALSE;
        if(isset($term->tid) && $term->tid == $item->tid) {
          $active = TRUE;
        }
        $subcategories[] = [
          'id' => $item->tid,
          'name' => $item->name,
          'image' => $image_themed,
          'url' => url('taxonomy/term/' . $item->tid),
          'active' => $active,
        ];
      }

      $data = [];
      $data['level'] = $level;

      $content .= theme('customize_term_subcategory', array('items' => $subcategories, 'data' => $data));
    }

  }catch (EntityMetadataWrapperException $exc) {
    watchdog(
      'customize',
      'See '  . __FUNCTION__ . '() <pre>' .  $exc->getTraceAsString() . '</pre>',
       NULL, WATCHDOG_ERROR
    );
  }

  return $content;
}

function _customize_product_list($vocabulary) {
  $content = '';

  try {

    $current_node = menu_get_object('node', 1);
    $current_term = menu_get_object('taxonomy_term', 2);

    $tids = [];
    if($current_node) {
      // select all
      $tree = taxonomy_get_tree($vocabulary);
      foreach ($tree as $term) {
        $tids[] = $term->tid;
      }
    }elseif($current_term) {
      // add current
      $tids[] = (int)$current_term->tid;
      // add children terms
      $children = taxonomy_get_children($current_term->tid);
      if(count($children)) {
        $tids = array_merge($tids, array_keys($children));
      }
    }

    $type = '';
    if($vocabulary == 4) {
      $type = 'catalog';
    }elseif($vocabulary == 8) {
      $type = 'stock';
    }

    $data = [];

    $data['form_fuel'] = [];
    $field = field_info_field('field_car_fuel');
    if($field) {
      $values = $field['settings']['allowed_values'];
      $removeValues = ['lpg', 'hybrid', 'elektro'];
      $data['form_fuel'] = array_diff_key($values, array_flip($removeValues));
    }
    $data['form_transmission'] = [];
    $field = field_info_field('field_car_transmission');
    if($field) {
      $data['form_transmission'] = $field['settings']['allowed_values'];
    }
    $data['form_body'] = ['All' => 'Nerozhoduje'];
    $field = field_info_field('field_car_body');
    if($field) {
      $data['form_body'] = array_merge($data['form_body'], $field['settings']['allowed_values']);
    }

    // pass category ids and car type (stock/catalog)
    $data['product_list'] = views_embed_view('block_car_list', 'block', implode($tids, '+'), $type);

    $content .= theme('customize_product_list', array('data' => $data));

  }catch (EntityMetadataWrapperException $exc) {
    watchdog(
      'customize',
      'See '  . __FUNCTION__ . '() <pre>' .  $exc->getTraceAsString() . '</pre>',
       NULL, WATCHDOG_ERROR
    );
  }

  return $content;
}

/**
 * Implements hook_node_presave().
 * Assign price from to car.
 */
function customize_node_presave($node) {

  if($node->type == 'car') {

    try {

      $wrapper = entity_metadata_wrapper('node', $node);

      // find lowest price in field collection
      $prices = [];
      foreach ($wrapper->field_car_pricelist->getIterator() as $delta => $item_wrapper) {
        $prices[] = (int)$item_wrapper->field_pricelist_price->value();
        $prices[] = (int)$item_wrapper->field_pricelist_price2->value();
      }

      if(!empty($prices)) {
        $wrapper->field_price_from = min($prices);
      }

    }catch (EntityMetadataWrapperException $exc) {
      watchdog(
        'customize',
        'See '  . __FUNCTION__ . '() <pre>' .  $exc->getTraceAsString() . '</pre>',
         NULL, WATCHDOG_ERROR
      );
    }
  }
}
